{
  "name": "leven-sort",
  "version": "1.1.3",
  "description": "Simply sort by similarity, starring Levenshtein via leven",
  "keywords": [
    "sort",
    "leven",
    "levenshtein",
    "distance",
    "algorithm",
    "algo",
    "string",
    "difference",
    "diff",
    "fast",
    "fuzzy",
    "similar",
    "similarity",
    "compare",
    "comparison",
    "edit",
    "text",
    "match",
    "matching",
    "sort",
    "order",
    "objects",
    "arrays"
  ],
  "files": [
    "index.js"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/musocrat/leven-sort"
  },
  "homepage": "https://github.com/musocrat/leven-sort",
  "author": {
    "name": "Andrew Carpenter"
  },
  "bugs": {
    "url": "https://github.com/musocrat/leven-sort/issues",
    "email": "andrew@musocrat.com"
  },
  "main": "index.js",
  "scripts": {},
  "license": "MIT",
  "devDependencies": {},
  "dependencies": {
    "leven": "^2.0.0"
  },
  "readme": "# leven-sort   [![npm version](https://badge.fury.io/js/leven-sort.svg)](http://badge.fury.io/js/leven-sort)   [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\r\n\r\nSimply sort by similarity, starring Levenshtein via [leven](https://github.com/sindresorhus/leven).\r\n\r\nAllows sorting of an array of strings or array of objects by similarity. For arrays of objects\r\nyou can sort by up to two keys.\r\n\r\n## install\r\n`npm i leven-sort --save`\r\n\r\n## api\r\n\r\n**leven-sort** only exports one function, but it has 3 distinct signatures\r\n\r\n1. Sort simple text array  \r\n`arrayToSort`: Array to sort (sorted in place)   \r\n`sourceText`: The text to check similarity of\r\n\r\n2. Sort array of objects, with optional secondary sort\r\n`arrayToSort`: Array to sort (sorted in place)   \r\n`sourceText1`: The text to check similarity of   \r\n`key1`: Property name to be compared in each object   \r\n`sourceText2` *(optional)*: If performing a secondary sort, this is the text to check key2 by  \r\n`key2` *(optional)*: For secondary sort on object, this is the second property to check   \r\n\r\n3. Sort array of objects by multiple keys, each by the same source and with equal weight  \r\n`arrayToSort`: Array to sort (sorted in place)   \r\n`sourceText`: The text to check similarity of   \r\n`arrayOfKeys`: Array of property names to compare    \r\n\r\n## usage\r\n\r\nSort simple text array\r\n```javascript\r\nconst levenSort = require('leven-sort')\r\nconst sourceName = 'Bill Griffin'\r\nconst nameAry = [\r\n  'Carl Martinez',\r\n  'Roger Davis',\r\n  'William George',\r\n  'Andrew Torres',\r\n  'Billy Campbell',\r\n  'Alan King',\r\n  'Benjamin Wilson',\r\n  'Bill Griffin',\r\n  'Dennis Smith',\r\n  'Billy Griffith'\r\n]\r\nlet levSorted = levenSort(nameAry, sourceName)\r\n```\r\n\r\nSort array of objects, with secondary sort\r\n```javascript\r\nconst levenSort = require('leven-sort')\r\nconst sourceFirst = 'Bill'\r\nconst sourceLast = 'Griffin'\r\nconst nameObjAry = [\r\n  { first: 'Carl', last: 'Martinez' },\r\n  { first: 'Roger', last: 'Davis' },\r\n  { first: 'William', last: 'George' },\r\n  { first: 'Andrew', last: 'Torres' },\r\n  { first: 'Billy', last: 'Campbell' },\r\n  { first: 'Alan', last: 'King' },\r\n  { first: 'Benjamin', last: 'Wilson' },\r\n  { first: 'Bill', last: 'Griffin' },\r\n  { first: 'Dennis', last: 'Smith' },\r\n  { first: 'Billy', last: 'Griffith' }\r\n]\r\n\r\nlet levSorted = levenSort(nameObjAry, sourceFirst, 'first', sourceLast, 'last')\r\n\r\n```\r\n\r\nSort array of objects by multiple keys\r\n```javascript\r\nconst levenSort = require('leven-sort')\r\nconst source = 'Bill'\r\nconst nameObjAry = [\r\n  { first: 'Carl', last: 'Martinez' },\r\n  { first: 'Roger', last: 'Davis' },\r\n  { first: 'William', last: 'George' },\r\n  { first: 'Andrew', last: 'Torres' },\r\n  { first: 'Billy', last: 'Campbell' },\r\n  { first: 'Alan', last: 'King' },\r\n  { first: 'Benjamin', last: 'Wilson' },\r\n  { first: 'Bill', last: 'Griffin' },\r\n  { first: 'Dennis', last: 'Smith' },\r\n  { first: 'Billy', last: 'Griffith' }\r\n]\r\n\r\nlet levSorted = levenSort(nameObjAry, source, ['first', 'last'])\r\n\r\n```\r\n",
  "readmeFilename": "README.md",
  "_id": "leven-sort@1.1.3",
  "_from": "leven-sort@^1.1.3"
}
